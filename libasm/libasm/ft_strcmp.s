BITS 64

SECTION .text

    GLOBAL ft_strcmp

ft_strcmp:
    xor rax, rax          ; Обнуляем rax (используется для возврата разницы символов)
    xor rbx, rbx          ; Обнуляем rbx (для временного хранения второго символа)

.loop:
    mov al, BYTE [rdi]    ; Загружаем текущий символ из первой строки (al = *s1)
    mov bl, BYTE [rsi]    ; Загружаем текущий символ из второй строки (bl = *s2)
    cmp al, 0             ; Проверяем, достигли ли конца первой строки (`\0`)
    je .end               ; Если да, переходим к завершению
    cmp bl, 0             ; Проверяем, достигли ли конца второй строки (`\0`)
    je .end               ; Если да, переходим к завершению
    cmp al, bl            ; Сравниваем символы первой и второй строки
    jne .end              ; Если символы не равны, выходим из цикла
    inc rdi               ; Увеличиваем указатель первой строки (s1++)
    inc rsi               ; Увеличиваем указатель второй строки (s2++)
    jmp .loop             ; Повторяем цикл

.end:
    movzx rax, al         ; Расширяем al до rax (копируем символ из первой строки)
    movzx rbx, bl         ; Расширяем bl до rbx (копируем символ из второй строки)
    sub rax, rbx          ; Вычисляем разницу символов (s1[i] - s2[i])
    ret                   ; Возвращаем результат (0, >0 или <0)